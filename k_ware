2020.01/ 입사 
react.js 로 구성되어 있어 react 공부와 회사 업무를 같이 진행. 
HPAI 데이터 각종 검색기능,테이블,페이징 공통화 작업,레이아웃 수정 등 기초적인 업무를 react를 적용해볼 기회를 가짐.

2020.04/
react.js
sdl(Structured Data library구조화된 데이터 라이브러리) 구현
리엑트로 처음부터 끝까지 작업하고, react를 제일 많이 배울 수 있었고, 재미있었던 작업.
front에서 DB를 설계해 줄 수 있는 페이지이다. 테이블명,컬럼명,컬럼타입,속성,primary key,foreign key 등 설정할 수 있으며, CRUD가 가능하고 다양한 동적 기능들이 필요했던 작업.
리엑트에서 부모와 자식간에 데이터들을 전달하고, 데이터들을 부모 or 자식에서 저장하여 서로 데이터들을 주고 받을 수 있는 방법(pops, states)이 가장 중요.
다음번엔 코드를 더 명확하고, 중복없이 짜도록 노력할 것.

2020.05/
react.js
데이터 테이블
질병발생정보,조류이동정보,날씨 등 각종 데이터들의 페이지를 공통화 시키고 서로 다른 테이블로 나타낸다. 조건에 따라 검색할 수있다. 
동적으로 테이블의 컬럼값들을 보여주고, 사용자의 편의에 따라 원하는 데이터만을 볼 수 있다. 
시각적으로 보여주기 위해 통계와 그래프도 적용.

2020.07/
react.js
BRT
BRT(Boosted Regression Tree)는 회귀 트리 분석법에 기반한 방법으로 독립 변수 공간을 다양한 규칙을 이용하여 순차적으로 분할하는 방법.
이를 통해 어떤 독립변수가 반응변수(response)에 가장 큰 영향을 끼치는지 분석. 일반적 회귀 트리는 한번 분기할 때 분할된 부분집합의 response의 표준편차를 최소화 하는 독립변수와 그 기준값을 찾아 트리를 펼치는 방식으로 response를 가장 잘 예측하는 분할 구조를 만드는데, BRT는 분할의 정확도를 높이기 위한 Boosting 방법을 사용합니다.
BRT 모형의 다양한 특징을 기반으로 질병발생과 관련이 있는 요인을 추정하는 데 적절 - 과거 조류인플루엔자 발생기록을 바탕으로 가금사육요인, 환경요인을 포함한 tree 모형을 구축하여 HPAI 위험요인을 추정한 결과를 2019년 강원대학교에서 제시하였습니다.
조류인플루엔자가 발병했는지(1) 안했는지(0)를 숫자로 표현하여 Bernoulli family를 이용해 요인을 분석했습니다.
LR
LR(Logistic Regression) 은 Logit function을 활용한 회귀분석으로서, 다변수량으로 y값을 예측한다고 했을때에 범위를 맞춰주기 위해서 logit(log odds) 변환을 해주어 예측(0~1사이의 값)을 하는 방식이다.
GWPR
GWPR(GeographicallyWeighted Poisson Regression)는 공간효과를 고려한 상태에서 HPAI발생 건수를 예측하기 위한 공간가중 포아송 회귀모형이다. 즉, 특정위치와 지리적으로 인접하고 있는 자료는 멀리 떨어져 있는 자료에 비하여 상대적으로 더 큰 영향을 미친다는 특성을 모든 관찰치에 반영하여 모형의 회귀계수를 추정한다. 이와 동일한 개념에서 GWPR모형에서 가중치를 적용한다.
사용자에게서 파일을 올려 파이썬 R프로그램을 통해 분석한뒤 다시 사용자에 해당 통계 데이터를 json 형식으로 return 받아 처리.
family,tc,lr,bf 값들을 입력받아 모델 분석을 실행하고, 분석결과 리스트들을 저장한다. 
또한 데이터 파일들의 컬럼 값에 따라 다르게 분석 할 수 있도록 웹 페이지를 구현.
지금까지 class component로만 react를 짜고 hook는 잘 사용하지 않음. 다음번엔 hook를 공부하여 hook 사용법을 익히자. 

2020.08/
react.js
인증 관련하여 메뉴얼 작업
전자정부 프레임워크 사용하여 메뉴얼 작업. 기존 개발자가 도중 다른 프로젝트로 파견가서 인수인계.
기존 front 에서 메뉴얼 관리를 하였지만 backEnd에서 관리하도록 변경.
재귀함수 사용하여, 무한depth로 구성.->react 재귀함수에 대하여 많이 고민해보고 function 호출에 대해 깊이 연습. 
조금 더 스스로 코드리뷰 하는 시간이 필요.

2020.10 배포
bird.kware.co.kr GIS 기반 통계분석 기술을 활용한 농장방역안내 서비스 배포
rnd.kware.co.kr 역학 발생 데이터 분석 플랫폼 배포
cdr.kware.co.kr 고병원성 조류인플루엔자 전파 HPAI 역학지도 시스템 배포
zq.kware.co.kr GIS기반 통계분석 기술을 활용한 방역지대 설정지원 시스템 배포
리눅스를 다루고, 서버를 다루는 공부가 필요. 

2020.10
전자소독필증 통합관리 시스템
기존 거점소독시설 방문 기록은 수기로 작성되었으나 차량 방문기록 데이터 또는 농장,소독 시설을 모바일과 웹페이지로 데이터를 처리
jquery, JPA 사용,restful API,swagger UI.,시퀸스 다이어그램,유스케이스 다이어그램
관리자 페이지는 기존과 같으나 hybrid app으로 앱 개발이 주된 목적. 협동이 가장 필요했던 프로젝트. 말할때는 신중하게 해야하고, 깊게 생각해야 하며, 예상 답변또한 생각하고 말해야한다.
확신을 가지고 말해아함.
회사에서 프로젝트 진행할 때 적용하였던 jquery와 react를 비교해 보면 
react의 가장 큰 장점은 현재 브라우저에 보여주고 있는 진짜 DOM과 바뀐 DOM을 비교하여 바뀐 DOM만을 해석하여 유저에게 새로운 화면을 보여준다고 하는게 가장 큰 장점으로 알려져 있다.
코드의 가독성이나, 중복적인 코드를 확실히 react.js가 편리하게 개발할 수 있다. 하지만 jquery가 코드 작성이 편하게 느껴질 때도 많다.
계속 고민해보고, 깊게 공부해 봐야겠다.

2020.11~12
파인테크 금영 
jquery,mybits,sringBoot,mariaDB,restful API, 사용 
SI성 프로젝트 이었으나 향후 운영도 예상 됨.
DB에 data를 텍스트로 넣는 것이 아니라 시스템 코드를 넣고 그 시스템 코드를 관리해야 했어서 생소했다. 
매입,매출,수주정보 등을 관리하는 홈페이지. 쉬운 ERP 프로그램을 만든거 같다.
연구과제 프로젝트들 보다 SI성 프로젝트가 좀 더 명확한 가이드 라인이 제시되었고, 기획서의 분석이 더 중요함(꼼꼼해야 한다.)
기존 front 업무를 많이 맡아 처리하면서 backend 개념들을 많이 접하지 못했지만 파인테크를 하면서 앞으로 공부해야 할 방향 제시. 
springboot -> (모르는 개념들만 뽑아서 JAVA공부) -> query -> linux server 명령어 

2020.12 철새 알림 하이브리드 앱 
하이브리드 앱으로 코딩.
JPA,springBoot,react,jquery
철새 알림이란 질병 발생시 데이터팀에서 크롤링하여 데이터를 보내주면 앱에서 알림 현황을 보여주고, 데이터 테이블에서 질별방생정보 데이터를 가지고 와 질병 발생 현황을 보여줌.
데이터의 변화가 많은 페이지는 react를 사용하고, 편리하게 데이터를 가공하기 위해서는 jquery를 사용하여 라이브리러를 혼합함.
JPA 레포지토리에 대한 학습,리팩토링 하며 JAVA에 대한 개념 다지기. 

2021.1 채널 알리미
하이브리드 앱으로 코딩.
ibatis,spring,jstl,linux
채널 알리미는 보고서 관리자는 웹에서 보고서 용도에 맞게 보고서 양식을 자유롭게 작성 할 수 있고,
보고서 사용자는 앱에서 보고서 설문지를 작성하고, 보고서 관리자가 웹에서 해당 보고서를 관리할 수 있는 형태의 프로젝트이다. 
ibatis,spring,jstl의 기술을 사용한 이유는 기존에 개발하였던 프로젝트에서 기능들을 추가하고, 수정하기 위해 옛날 방식의 기술들을 사용. 

2021.2 포럼 게시판 API 서버
springBoot, restDoc api, liunx, JPA, mybatis
프로젝트를 개발하게 된 이유는 각종 공지사항,Q&A,FAQ와 같은 게시판 기능들을 다른 프로젝트에서 게시판 기능들을 직접 개발하지 않고,
포럼 게시판 API를 호출하여 개발하기 위함이다. 포럼 게시판 API는 각종 공지사항,Q&A,FAQ와 같은 게시판에 적합하며, 복잡한 릴레이션 형태의 게시판일 경우 사용이 제한
MSA의 독립된 서버로 타 컴포넌트와 의존성 없이 독립된 배포를 목적으로 개발하였다. 
일반적인 형태의 게시판 기능들이나 API 개발을 처음 접해보고 구현부터 아키텍쳐 설계까지 혼자서 개발해보고 많이 찾아봄으로써 실력이 향상되었던 프로젝트이다. 
JWT을 사용하여 인증하였고, 복잡하지 않은 로직은 JPA를 사용하여 처리속도를 향상시켰으며, 문서화는 restDic api를 접목하여 사용자 가이드 문서를 자동화 하였다. 












